<?php


namespace App\Model\News;


use App\Model\News\Comments\Comment;
use App\Model\News\Comments\CommentsFactory;
use App\Model\News\Voting\Voting;
use App\Model\News\Voting\VotingFactory;
use App\Model\User\User;
use App\Model\User\UserFactory;
use System\App\Model\AbstractFactoryChildModel;

class News extends AbstractFactoryChildModel
{

	/**
	 * @return User|null
	 */
    public function getAuthor(): ?User
    {
        /**
         * @var $userFactory UserFactory
         */
        $userFactory = $this->getFactoryManager()->get(UserFactory::class);
        /**
         * @var $user User|null
         */
        $user = $userFactory->getById($this->getInt("user_id"));

        return $user;
    }

	/**
	 * @return bool
	 */
    public function isVotingEnabled(): bool
    {
        return $this->getInt("allow_voting") == 1;
    }

    /**
     * @param User $user
     *
     * @return Voting|null
     * @throws \Exception
     */
    public function getVoteByUser(User $user): ?Voting
    {
        /**
         * @var $votingFactory VotingFactory
         */
        $votingFactory = $this->getFactoryManager()->get(VotingFactory::class);
        return $votingFactory->getByNewsAndUser($this, $user);
    }

    /**
     * @return Voting[]
     * @throws \Exception
     */
    public function getVotes(): array
    {
        /**
         * @var $votingFactory VotingFactory
         */
        $votingFactory = $this->getFactoryManager()->get(VotingFactory::class);
        return $votingFactory->getByNews($this);
    }

	/**
	 * @return int
	 */
    public function getLikesCount(): int
    {
        /**
         * @var $votingFactory VotingFactory
         */
        $votingFactory = $this->getFactoryManager()->get(VotingFactory::class);
        return $votingFactory->getLikeCountByNews($this);
    }

	/**
	 * @return int
	 */
    public function getDislikesCount(): int
    {
        /**
         * @var $votingFactory VotingFactory
         */
        $votingFactory = $this->getFactoryManager()->get(VotingFactory::class);
        return $votingFactory->getDislikeCountByNews($this);
    }

	/**
	 * @param int  $type
	 * @param User $user
	 */
    public function addVote(int $type, User $user): void
    {
        /**
         * @var $votingFactory VotingFactory
         */
        $votingFactory = $this->getFactoryManager()->get(VotingFactory::class);
        $votingFactory->createObject([
            'type' => (int)$type,
            'user_id' => $user->getInt("id"),
            'news_id' => $this->getInt("id")
        ]);
    }

	/**
	 * @return bool
	 */
    public function isCommentingEnabled(): bool
    {
        return $this->getInt("allow_commenting") == 1;
    }

    /**
     * @return Comment|null
     * @throws \Exception
     */
    public function getLatestComment(): ?Comment
    {
        /**
         * @var $commentsFactory CommentsFactory
         */
        $commentsFactory = $this->getFactoryManager()->get(CommentsFactory::class);
        return $commentsFactory->getLatestCommentByNews($this);
    }

	/**
	 * @param string $text
	 * @param User   $user
	 */
    public function addComment(string $text, User $user): void
    {
        $commentsFactory = $this->getFactoryManager()->get(CommentsFactory::class);
        $commentsFactory->createObject([
            'news_id' => $this->getInt("id"),
            'user_id' => $user->getInt("id"),
            'timestamp' => time(),
            'text' => $text
        ]);
    }

    /**
     * @return Comment[]
     * @throws \Exception
     */
    public function getComments(): array
    {
        /**
         * @var $commentsFactory CommentsFactory
         */
        $commentsFactory = $this->getFactoryManager()->get(CommentsFactory::class);
        return $commentsFactory->getAllByNews($this);
    }

    /**
     * @return bool
     * @throws \Exception
     */
    public function delete(): bool 
    {
        foreach ($this->getComments() as $comment) {
            $comment->delete();
        }

        foreach ($this->getVotes() as $vote) {
            $vote->delete();
        }

        return parent::delete(); // TODO: Change the autogenerated stub
    }
}